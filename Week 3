//Tute 3
//Palendrome activity
int main(int argc, char *argv[]) {
  char *word = argv[1];  
  for (int l = 0; r= strlen(word) - 1; l < r; l++; r--) {
    if (word[l] != word[r]) {
      printf("no\n");
      return 0;
    }
    printf("yes\n");
    return 0;
  }
}


//Binary Search tree
//BST Insertion

//BStree.h file Defines our ADT
typedef struct Node *Tree;

//BStree.c file Implements the tree
#include "BStree.h"
typedef struct Node {
  int data;
  Tree left, right;
} Node;

//Create a node
Tree TreeCreate(Item it) {
  Tree root = malloc(sizeof(struct Node));
  root->data = it;
  //Pointer to left and right node
  root->left = NULL;
  root->right = NULL;
  return root;
}

// Insert a new item into a Tree
Tree TreeInsert(Tree t, Item it) {
  //Tree is empty
  if (t == NULL) {
    TreeCreate(it);
  } else if (it > t->data) { 
    
  } else if (it < t->data) {
  }
}

void TreeFree(Tree t) {
}

void showTree(Tree t) {
}




















