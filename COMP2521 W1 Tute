//COMP1511 Code Gap

//While loop
int sum = 0;
int i = 1;
while(i < 10) {
  sum = sum + i;
  i++;
}

//For loop
int sum = 0;
for(i = 1; i < 10; i++) {
  sum += i;
}

//Switch Statement
char grade = 'A';
switch(grade) {
  case 'A' : 
    printf("You did great!"); 
    break; //break statements tells the switch statement that it wants to leave
  
  case 'B' : 
    printf("You did alright!"); 
    break;
  
  default : 
    printf("Invalid Grade");
}

//Assert functions
#include <assert.h>
assert(); //assert will terminate the program if its argument turns out to be false

//Linked Lists
struct node {
  int data;
  struct node *next;
};

//Sums all the values in the list
int sum_list_values(struct node *list) {
  int sum = 0;
  //Step 1: make current to keep track of where we are in the list
  struct node *current = list;
  //Step 2: Iterate through the list using a loop (Null is at the end)
  while(current != NULL) {
    sum += current->data;
  //Step 3: reassign current to iterate through the loop
  current = current->next;
  }
  return sum;
}

//Pointers
/*Pointer is a type of data that is a memory address*/

int age = 30;
int * pAge = &age;  //When creating a pointer variable, inside of that pointer variable you store a memory address of another variable 


printf("Age's memory address is %p\n", &age);
printf("Pointer variable address is %p\n", pAge);


//Malloc
/*The Malloc function allocates size bytes of memory and returns a pointer to the allocated memory
Malloc will go and ask the computer to set aside the amount of memory you asked for and then it will return a pointer to that memory */
#include <stdlib.h>

int numberOfElements;
scanf("%d", &numberOfElements);

int *myArray = malloc(sizeof(int) * numberOfElements); //Want memory space of an integer x numberOfElements

//Deleting Maloc (memory)
free(myArray) //Free the pointer

//myArray[] is the same as *myArray
int myArray[MAX_SIZE];
int *myArray = malloc(sizeof(int) * numberOfElements);


//Function for running through list and displaying values
void show_list(struct node *list) {
  struct node *current = list;
  while(current != NULL) {
    printf("%d", current->data);
    current = current->next;
  }
}


//Adding an element to the front of the list
struct node *prepend(struct node *list, int data) {
  struct node *temp = list;
  new_node(data, temp);
  return list;
}

//New node function
struct node *new_node(int data, struct node *next) {
  struct node *new = malloc(sizeof(struct node));
  new->data = data;
  new->next = next;
  return new;
}

//Add an element to the end of the list
struct node *append(int data, struct node *list) {
  //Case for when the list is empty
  if (list == NULL) {
    return new_node(data, NULL);
  }
 
 struct node *current = list;
 while (current->next != NULL) {
  current = current->next;
 }
 current->next = new_node(data, NULL);
 return list;
}

//Given a sorted list, insert a new element so that the resulting list remains sorted
struct node *sorted_insert(struct node *list, data) {

  //Case for inserting at beginning of the list
  if (data <= list->data ) {
    return prepend(list, data);
  }

  //Case for an empty list
  if (list == NULL) {
    return new_node(data, list);
  }
  
  struct node *current = list;
  while (current->next != NULL) {
    if (current->data <= current->next->data) {
      struct node *temp = current->next;
      current->next = new_node(data, temp);
    }
    current = current->next;
  }
  
  //Case for inserting at the end of the list
  if (current->next == NULL) {
    return append(data, list);
  }
}



//Delete an element at given index
struct node *delete(struct node *list, int position) {   
  int index = 0;
  //Case 1: For an empty list
  if (list == NULL) {
    return list;
  }
  
  //Case 2: Deleting first element
  if (position == 0) {
    struct node *temp = list->next;
    free(list);
    return temp;
  }
  
  struct node *current = list;
  while (current->next != NULL) {
    if (index == position - 1) {
      struct node *temp = current->next->next;
      free(current->next);
      current->next = temp;
      return list;
    }
    current = current->next;
    index++;
  }
}

//Delete all elements in the list
struct node *delete_all(struct node *list) {  
  int count = 0;
  while (list != NULL) {
    delete(list, count);
    count++;
  }
  return list;
}


//argc and argv
/*argc represents the number of things that you entered into the command line when running the program on a terminal
argv is an array that holds the string values of the things that were entered on the command line when running the program
*/
int main(int arg c, char *argv[]) {
}


//1.3 Compilation and Makefiles













































